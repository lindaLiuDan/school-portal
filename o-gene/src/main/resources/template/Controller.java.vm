package ${package};

import com.info.common.annotation.Login;
import com.info.common.base.AbstractController;
import com.info.utils.PageUtils;
import com.info.utils.ResultMessage;
import com.info.validator.ValidatorUtils;
import com.info.validator.group.AddGroup;
import com.info.validator.group.UpdateGroup;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Arrays;
import java.util.Map;

/**
 * ${comments}
 *
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${moduleName}/${pathName}")
public class ${className}Controller extends AbstractController {

    @Autowired
    private I${className}Service ${classname}Service;


    /**
     * 功能描述: 列表查询
     *
     * @Params: * @param null
     * @Author:  ${author}  ${email}
     * @Date: ${datetime}
     * @Return:
     */
    @Login
    @GetMapping("/list")
    @RequiresPermissions("${moduleName}:${pathName}:list")
    public ResultMessage list(@RequestParam Map<String, Object> params) {
        PageUtils page = ${classname}Service.queryPage(params);
        return ResultMessage.ok(page);
    }

    /**
     * 功能描述: 获取详细信息
     *
     * @Params: * @param null
     * @Author:  ${author}  ${email}
     * @Date: ${datetime}
     * @Return:
     */
    @Login
    @GetMapping("/info/{${pk.attrname}}")
    @RequiresPermissions("${moduleName}:${pathName}:info")
    public ResultMessage info(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}) {
        ${className}Entity ${classname} = ${classname}Service.getById(${pk.attrname});
        return ResultMessage.ok(${classname});
    }

    /**
     * 功能描述: 保存信息
     *
     * @Params: * @param null
     * @Author:  ${author}  ${email}
     * @Date: ${datetime}
     * @Return:
     */
    @Login
    @PostMapping("/save")
    @RequiresPermissions("${moduleName}:${pathName}:save")
    public ResultMessage save(@RequestBody ${className}Entity ${classname}) {
        ValidatorUtils.validateEntity(${classname}, AddGroup.class);
        ${classname}.setCreator(getUserId().intValue());
        ${classname}.setCreatorTime(DateUtils.now());
        ${classname}Service.save(${classname});
        return ResultMessage.ok();
    }

    /**
     * 功能描述: 修改信息
     *
     * @Params: * @param null
     * @Author:  ${author}  ${email}
     * @Date: ${datetime}
     * @Return:
     */
    @Login
    @PostMapping("/update")
    @RequiresPermissions("${moduleName}:${pathName}:update")
    public ResultMessage update(@RequestBody ${className}Entity ${classname}) {
        ValidatorUtils.validateEntity(${classname}, UpdateGroup.class);
        ${classname}.setEditor(getUserId().intValue());
        ${classname}.setEditorTime(DateUtils.now());
        ${classname}Service.updateById(${classname});//全部更新
        return ResultMessage.ok();
    }

    /**
     * 功能描述: 删除信息
     *
     * @Params: * @param null
     * @Author:  ${author}  ${email}
     * @Date: ${datetime}
     * @Return:
     */
    @Login
    @PostMapping("/delete")
    @RequiresPermissions("${moduleName}:${pathName}:delete")
    public ResultMessage delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s) {
        ${classname}Service.removeByIds(Arrays.asList(${pk.attrname}s));
        return ResultMessage.ok();
    }

}
